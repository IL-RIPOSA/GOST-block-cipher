import numpy as np

plaintext= "1111001111111110011010100000010100100010000001010100111001111111"

r2=plaintext[0:32]
r1=plaintext[32:65]
# r1=plaintext[31:0:-1] + plaintext[0]
# r2=plaintext[63:31:-1]

key= "0000000000000000000000000000011100000000000000000000000000000110000000000000000000000000000001010000000000000000000000000000010000000000000000000000000000000011000000000000000000000000000000100000000000000000000000000000000100010000000100000000000100000001"

#key = "1111111111111111111111111111111111000011011110111101010110011001010101111101010101010111100001101111011110101000101010101111100001101111011110101001010101011100110010101011111010101010101111000011011110111101010010101010111100000000000000000000000000000001"
ksu=[key[i:i+32] for i in range(0, len(key), 32)][::-1]

print(r1,r2)
print("KSU: " ,ksu)

s_boxes =[
        ( "0100", "1010", "1001", "0010", "1101", "1000", "0000", "1110", "0110", "1011", "0001", "1100", "0111", "1111", "0101", "0011" ),     
            ( "1110", "1011", "0100", "1100", "0110", "1101", "1111", "1010", "0010", "0011", "1000", "0001", "0000", "0111", "0101", "1001" ), 
            ( "0101", "1000", "0001", "1101", "1010", "0011", "0100", "0010", "1110", "1111", "1100", "0111", "0110", "0000", "1001", "1011" ), 
            ( "0111", "1101", "1010", "0001", "0000", "1000", "1001", "1111", "1110", "0100", "0110", "1100", "1101", "0010", "0101", "0011" ), 
            ( "0110", "1100", "0111", "0001", "0101", "1111", "1101", "1000", "0100", "1010", "1001", "1110", "0000", "0011", "1011", "0010" ), 
           ( "0100", "1011", "1010", "0000", "0111", "0010", "0001", "1101", "0011", "0110", "1000", "0101", "1001", "1100", "1111", "1110" ),  
           ( "1101", "1011", "0100", "0001", "0011", "1111", "0101", "1001", "0000", "1010", "1110", "0110", "1100", "1000", "0010", "1100" ),
          ( "0001", "1111", "1101", "0000", "0101", "0111", "1010", "0100", "1001", "0010", "0011", "1110", "0110", "1011", "1000", "1100" ) 
 ]

#APO 1 EWS 8:

for j in range (0,8):
    # print("before R1:",r1,"R2:", r2)
    #print("ksu",j ,ksu[j])
    cm1a = bin(int(r1,2)+ int(ksu[j],2))[2:]
    # print("cm1a",cm1a,len(cm1a))
    if len(cm1a)<=31:
        cm1=cm1a.zfill(32)
    elif len(cm1a)==32:
        cm1=cm1a
    else : 
        cm1=cm1a[len(cm1a)-32:].zfill(32)
    # print("cm1",cm1,len(cm1))
    cm1_ar=[int(cm1[i:i+4],2) for i in range(0, len(cm1), 4)]
    # print("cm1_ar",cm1_ar)
    s_box_out=""
    for i in range (0, 8):
     s_box_out += s_boxes[i][cm1_ar[i]]
    # print("s box res", s_box_out)
    shift_r= s_box_out[11:33] + s_box_out[0:11]
    # print("rotate", shift_r)
#      print("r2", r2)
    cm2a= bin(int(r2,2) ^ int(shift_r,2))[2:]
    if len(cm2a)<=31:
        cm2=cm2a.zfill(32)
    elif len(cm2a)==32:
        cm2=cm2a
    else : 
        cm2=cm2a[len(cm2a)-32:].zfill(32)
#       print("cm2",cm2)
    r2=r1
    r1=cm2
    print(j ,"after R1:",r1,"R2:", r2)
#APO 25 EWS 31:
for x in range (0,3):
    for y in range (7,-1,-1):
    #        print("before R1:",r1,"R2:", r2)
            #print("ksu[y]",ksu[y])
            cm1a = bin(int(r1,2)+ int(ksu[y],2))[2:]
            # print("cm1a",cm1a,len(cm1a))
            if len(cm1a)<=31:
                cm1=cm1a.zfill(32)
            elif len(cm1a)==32:
                cm1=cm1a
            else : 
                cm1=cm1a[len(cm1a)-32:].zfill(32)
            # print("cm1",cm1,len(cm1))
            cm1_ar=[int(cm1[i:i+4],2) for i in range(0, len(cm1), 4)]
            s_box_out=""
            for i in range (0, 8):
             s_box_out += s_boxes[i][cm1_ar[i]]
    #        print("s box res", s_box_out)

            shift_r= s_box_out[11:33] + s_box_out[0:11]
    #       print("rotate", shift_r)

            cm2a= bin(int(r2,2) ^ int(shift_r,2))[2:]
            if len(cm2a)<=31:
                cm2=cm2a.zfill(32)
            elif len(cm2a)==32:
                cm2=cm2a
            else : 
                cm2=cm2a[len(cm2a)-32:].zfill(32)
    #       print("cm2",cm2)
            r2=r1
            r1=cm2
            print(x, y ,"after R1:",r1,"R2:", r2)

chiphe= r2 + r1
print(chiphe)
print(hex(int(chiphe,2)))